//Server.C

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080  // Server port number

int main() {
    int sockfd, new_sockfd;
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len;
    int num;
    char word[100];

    // Create a TCP socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    // Set server address
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = INADDR_ANY;  // Listen on all interfaces
    servaddr.sin_port = htons(PORT);

    // Bind the socket to the server address
    if (bind(sockfd, (const struct sockaddr *) &servaddr, sizeof(servaddr)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(sockfd, 5) < 0) {  // Backlog queue of 5 connections
        perror("listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d\n", PORT);

    len = sizeof(cliaddr);

    // Accept a connection from a client
    new_sockfd = accept(sockfd, (struct sockaddr *) &cliaddr, &len);
    if (new_sockfd < 0) {
        perror("accept failed");
        exit(EXIT_FAILURE);
    }

    printf("Accepted connection from %s:%d\n", inet_ntoa(cliaddr.sin_addr), ntohs(cliaddr.sin_port));

    // Receive a number from the client
    int recv_size = recv(new_sockfd, &num, sizeof(num), 0);
    if (recv_size < 0) {
        perror("recv failed");
        exit(EXIT_FAILURE);
    } else if (recv_size == 0) {
        printf("Connection closed by client\n");
        close(new_sockfd);
        close(sockfd);
        exit(EXIT_SUCCESS);
    }

    // Validate number (1-10)
    if (num < 1 || num > 10) {
        printf("Error: Invalid number received. Please send a number between 1 and 10.\n");
        close(new_sockfd);
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    // Create an array of word representations (replace with your language if needed)
    const char *number_words[] = {"One", "Two", "Three", "Four", "Five",
                                  "Six", "Seven", "Eight", "Nine", "Ten"};

    // Copy the word representation to a buffer
    strcpy(word, number_words[num - 1]);

    // Send the word representation back to the client
    send(new_sockfd, word, strlen(word) + 1, 0);  // Include null terminator

    printf("Sent word representation to client: %s\n", word);

    close(new_sockfd);
    close(sockfd);
    return 0;
}


//client.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080 // Same port as server
#define SERVER_IP "localhost"  // Replace with server IP if needed

int main() {
    int sockfd;
    struct sockaddr_in servaddr;
    int num;
    char word[100];

    // Create a TCP socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));

    // Set server address
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = inet_addr(SERVER_IP);
    servaddr.sin_port = htons(PORT);

    // Connect to the server
    if (connect(sockfd, (const struct sockaddr *) &servaddr, sizeof(servaddr)) < 0) {
        perror("connect failed");
        exit(EXIT_FAILURE);
    }

    printf("Connected to server on port %d\n", PORT);

    // Get a number from the user
    printf("Enter a number between 1 and 10: ");
    if (scanf("%d", &num) != 1 || num < 1 || num > 10) {
        printf("Error: Invalid input. Please enter a number between 1 and 10.\n");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    // Send the number to the server
    int send_size = send(sockfd, &num, sizeof(num), 0);
    if (send_size < 0) {
        perror("send failed");
        exit(EXIT_FAILURE);
    }

    // Receive the word representation from the server
    int recv_size = recv(sockfd, word, sizeof(word), 0);
    if (recv_size < 0) {
        perror("recv failed");
        exit(EXIT_FAILURE);
    } else if (recv_size == 0) {
        printf("Connection closed by server\n");
        close(sockfd);
        exit(EXIT_SUCCESS);
    }

    printf("Received word representation from server: %s\n", word);

    close(sockfd);
    return 0;
}
